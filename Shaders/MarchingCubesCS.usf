#pragma once

#include "MarchingCubeCommons.ush"
#include "/Engine/Public/Platform.ush"
#include "VoxelVDBCommons.ush"

/**
 * Thanks to 龚大.
 * https://github.com/gongminmin/AIHoloImager/tree/main
 */

#if !defined(VOXEL_WRITABLE_CUBE_INDEX_OFFSETS)
#	define VOXEL_WRITABLE_CUBE_INDEX_OFFSETS 0
#endif

cbuffer MarchingCubeParameters
{
	/// Voxel grid dimensions for each axis
	uint VoxelSizeX;
	uint VoxelSizeY;
	uint VoxelSizeZ;

	/// Total number of cubes
	uint TotalCubes;

	/// The SDF (Level Set in nanovdb) value smaller than this value will be treated as inside the surface
	float SurfaceIsoValue;
};

/// Nanovdb Level Set Buffer
pnanovdb_buf_t SrcVoxelData;

/// Vertex Buffer Layout
/// =================================
/// | float3 | float(packed normal) |
/// =================================
/// Stride = 4 * sizeof(float)
RWBuffer<float4> OutVertexBuffer;

/// Index Buffer Layout
/// ============================
/// | uint32 | uint32 | uint32 |
/// ============================
RWBuffer<uint> OutIndexBuffer;

/// Atomic counter buffer
/// Size must be >= 3 for tracking multiple counters
RWBuffer<uint> Counter;

/// Cube index offset of specified ThreadID.x
/// It stores the execution order of the threads that has valid cube index.
/// Also means the prefix sum of the valid cases.
RWBuffer<uint> OutCubeIndexOffsets;
Buffer<uint> InCubeIndexOffsets;

/// Mapping from "prefix sum of valid cases" to "linear index"
RWBuffer<uint> OutNonEmptyCubeLinearId;
Buffer<uint> InNonEmptyCubeLinearId;

/// Cube index of a cube
RWBuffer<uint> OutNonEmptyCubeIndex;
Buffer<uint> InNonEmptyCubeIndex;

/// Indicate the base address when writing to VBO/IBO.
RWBuffer<uint2> OutVertexIndexOffset;
Buffer<uint2> InVertexIndexOffset;

uint NumNonEmptyCubes;

struct FVoxelVdbValueWithGradient
{
	float3 Gradient;
	float Value;
};

inline uint GetIndexByPoint(uint3 Point)
{
	return Point.x + Point.y * 65535U;
}

inline uint3 GetIndexSpaceCoordByLinearId(uint Index)
{
	uint Z = Index % VoxelSizeZ;
	uint XY = Index / VoxelSizeZ;
	uint Y = XY % VoxelSizeY;
	uint X = XY / VoxelSizeY;
	return uint3(X, Y, Z);
}

uint GetLinearIdByIndexSpaceCoord(uint3 Coord)
{
    return Coord.z + VoxelSizeZ * (Coord.y + VoxelSizeY * Coord.x);
}

inline uint3 SafeIndexCoord(uint3 IndexSpaceCoord)
{
	return min(IndexSpaceCoord, uint3(VoxelSizeX - 1, VoxelSizeY - 1, VoxelSizeZ - 1));
}

inline float SampleVoxelPoint(uint3 IndexSpaceCoord, in out FVoxelVdbSampler Sampler)
{
	return ReadVdbValue(SafeIndexCoord(IndexSpaceCoord), Sampler.Buffer, Sampler.GridType, Sampler.Accessor);
}

FVoxelVdbValueWithGradient SampleVoxelPointWithGradientSafe(uint3 IndexSpaceCoord, in out FVoxelVdbSampler Sampler)
{
	uint3 IndexPrevious = max(IndexSpaceCoord, 1) - 1;
	uint3 IndexNext = min(IndexSpaceCoord + 1, uint3(VoxelSizeX, VoxelSizeY, VoxelSizeZ) - 1);
	uint3 Index = IndexSpaceCoord;

	FVoxelVdbValueWithGradient Result;
	Result.Value = SampleVoxelPoint(IndexSpaceCoord, Sampler);

	float ValueNextX = SampleVoxelPoint(float3(IndexNext.x, Index.y, Index.z), Sampler);
	float ValuePrevX = SampleVoxelPoint(float3(IndexPrevious.x, Index.y, Index.z), Sampler);
	
	float ValueNextY = SampleVoxelPoint(float3(Index.x, IndexNext.y, Index.z), Sampler);
	float ValuePrevY = SampleVoxelPoint(float3(Index.x, IndexPrevious.y, Index.z), Sampler);
	
	float ValueNextZ = SampleVoxelPoint(float3(Index.x, Index.y, IndexNext.z), Sampler);
	float ValuePrevZ = SampleVoxelPoint(float3(Index.x, Index.y, IndexPrevious.z), Sampler);

	Result.Gradient = float3(ValuePrevX - ValueNextX, ValuePrevY - ValueNextY, ValuePrevZ - ValueNextZ);

	return Result;
}

inline uint GetAtomicCounter(uint Index, uint ValueToAdd)
{
	uint Value;
	InterlockedAdd(Counter[Index], ValueToAdd, Value);
	return Value;
}

inline uint CalcCubeIndex(uint3 IndexCoord, in out FVoxelVdbSampler Sampler)
{
	float Samples[8] = {
		SampleVoxelPoint(IndexCoord + uint3(0, 0, 0), Sampler),
		SampleVoxelPoint(IndexCoord + uint3(1, 0, 0), Sampler),
		SampleVoxelPoint(IndexCoord + uint3(1, 1, 0), Sampler),
		SampleVoxelPoint(IndexCoord + uint3(0, 1, 0), Sampler),
		SampleVoxelPoint(IndexCoord + uint3(0, 0, 1), Sampler),
		SampleVoxelPoint(IndexCoord + uint3(1, 0, 1), Sampler),
		SampleVoxelPoint(IndexCoord + uint3(1, 1, 1), Sampler),
		SampleVoxelPoint(IndexCoord + uint3(0, 1, 1), Sampler),
	};

	uint CubeIndex = 0;
	for (uint i = 0; i < sizeof(Samples) / sizeof(Samples[0]); ++i)
	{
		if (Samples[i] <= SurfaceIsoValue)
		// if (abs(Samples[i] - SurfaceIsoValue) < 1.f)
		{
			CubeIndex |= 1U << i;
		}
	}

	return CubeIndex;
}

inline float3 InterpolateVertex(float3 BeginPos, float3 EndPos, float BeginValue, float EndValue)
{
	float3 Result;
	if (BeginValue == EndValue)
	{
		Result = (BeginPos + EndPos) * 0.5f;
	}
	else
	{
		const float t = (SurfaceIsoValue - BeginValue) / (EndValue - BeginValue);
		Result = lerp(BeginPos, EndPos, t);
	}
	return Result;
}

#define WORKGROUP_SIZE_X 64
#define WORKGROUP_SIZE_Y 1
#define WORKGROUP_SIZE_Z 1

[numthreads(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, WORKGROUP_SIZE_Z)]
void CalcCubeIndexCS(uint3 ThreadID: SV_DispatchThreadID)
{
	// Boundary check to prevent dirty result.
	const uint LinearIndex = GetIndexByPoint(ThreadID);
	BRANCH if (LinearIndex >= TotalCubes)
	{
		return;
	}
	
	// Create Sampler
	FVoxelVdbSampler Sampler = CreateVdbSampler(SrcVoxelData);

	// Get coordinate from ThreadID.x
	const uint3 Coord = GetIndexSpaceCoordByLinearId(LinearIndex);

	// Cube Index
	const uint CubeIndex = CalcCubeIndex(Coord, Sampler);

	// Filtering out empty cube to prevent an unnecessary atomic operation.
	BRANCH
	if (EdgeTable[CubeIndex] != 0)
	{
		uint Idx = GetAtomicCounter(0, 1U);
		OutCubeIndexOffsets[LinearIndex] = Idx;
	}
	else
	{
		OutCubeIndexOffsets[LinearIndex] = ~0U;
	}
}

[numthreads(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, WORKGROUP_SIZE_Z)]
void CalcVertexAndIndexPrefixSumCS(uint3 ThreadID: SV_DispatchThreadID)
{
	// Boundary check
	const uint LinearIndex = GetIndexByPoint(ThreadID);
	BRANCH if (LinearIndex >= TotalCubes)
	{
		return;
	}

	const uint CubeOffset = InCubeIndexOffsets[LinearIndex];
	BRANCH if (CubeOffset == ~0U)
	{
		return;
	}

	// Filter out empty cases and save the relationship.
	OutNonEmptyCubeLinearId[CubeOffset] = LinearIndex;

	// Save the cube index of current cube
	FVoxelVdbSampler Sampler = CreateVdbSampler(SrcVoxelData);
	uint3 Coord = GetIndexSpaceCoordByLinearId(LinearIndex);
	uint CubeIndex = CalcCubeIndex(Coord, Sampler);
	OutNonEmptyCubeIndex[CubeOffset] = CubeIndex;

	// Calculate how many indices are in the current cube
	const uint NumIndices = TriangleNumTable[CubeIndex] * 3;

	// Calculate how many vertices will be produced in this cube
	uint Edges = EdgeTable[CubeIndex];
	uint NumVertices = 0;
	BRANCH if (Edges != 0)
	{
		for (uint i = 0; i < sizeof(OwnedEdge) / sizeof(OwnedEdge[0]); ++i)
		{
			const uint Edge = OwnedEdge[i];
			if (Edges & (1U << Edge))
			{
				++NumVertices;
			}
		}
	}

	// Use atomic counter to calculate the prefix sum
	uint VertexIndex = GetAtomicCounter(1, NumVertices);
	uint IndexIndex = GetAtomicCounter(2, NumIndices);
	OutVertexIndexOffset[CubeOffset] = uint2(VertexIndex, IndexIndex);
}


[numthreads(WORKGROUP_SIZE_X, WORKGROUP_SIZE_Y, WORKGROUP_SIZE_Z)]
void MarchingCubeMeshGenerationCS(uint3 ThreadID: SV_DispatchThreadID)
{
	// Boundary check
	const uint CubeOffset = GetIndexByPoint(ThreadID);
	BRANCH if (CubeOffset >= NumNonEmptyCubes)
	{
		return;
	}

	const uint3 CoordBias[] = {
		uint3(1, 0, 0),
		uint3(0, 1, 0),
		uint3(0, 0, 1),
		uint3(0, 1, 1),
		uint3(1, 0, 1),
		uint3(1, 1, 0),
	};

	const int3 CorrespondEdges[] = {
		int3(-1, 1, 9),
		int3(2, -1, 11),
		int3(4, 7, -1),
		int3(6, -1, -1),
		int3(-1, 5, -1),
		int3(-1, -1, 10),
	};

	const uint3 Coord = GetIndexSpaceCoordByLinearId(InNonEmptyCubeLinearId[CubeOffset]);
	const uint CubeIndex = InNonEmptyCubeIndex[CubeOffset];
	const uint Edges = EdgeTable[CubeIndex];

	const uint VertexIndexStart = InVertexIndexOffset[CubeOffset].x;
	uint Indices[12];
	uint VertexOffset = VertexIndexStart;
	// Owned Edge
	for (uint i = 0; i < sizeof(OwnedEdge) / sizeof(OwnedEdge[0]); ++i)
	{
		const uint Edge = OwnedEdge[i];
		if (Edges & (1U << Edge))
		{
			Indices[Edge] = VertexOffset;
			++VertexOffset;
		}
	}
	
	// Shared Edge
	for (uint i = 0; i < sizeof(CoordBias) / sizeof(CoordBias[0]); ++i)
	{
		const uint3 BiasedCoord = Coord + CoordBias[i];
		const uint BiasedCubeOffset = InCubeIndexOffsets[GetLinearIdByIndexSpaceCoord(BiasedCoord)];
		if (BiasedCubeOffset != ~0U)
		{
			const uint BiasedCubeIndex = InNonEmptyCubeIndex[BiasedCubeOffset];
			const uint BiasedEdges = EdgeTable[BiasedCubeIndex];

			uint BiasedVertexIndex = InVertexIndexOffset[BiasedCubeOffset].x;
			for (uint ei = 0; ei < sizeof(OwnedEdge) / sizeof(OwnedEdge[0]); ++ei)
			{
				if (BiasedEdges & (1U << OwnedEdge[ei]))
				{
					const int CorrespondingEdge = CorrespondEdges[i][ei];
					if (CorrespondingEdge != -1)
					{
						Indices[CorrespondingEdge] = BiasedVertexIndex;
					}
					++BiasedVertexIndex;
				}
			}
		}
	}
	
	VertexOffset = VertexIndexStart;
	FVoxelVdbSampler Sampler = CreateVdbSampler(SrcVoxelData);
	for (uint i = 0; i < sizeof(OwnedEdge) / sizeof(OwnedEdge[0]); ++i)
	{
		const uint Edge = OwnedEdge[i];
		if (Edges & (1U << Edge))
		{
			uint3 BeginCoord;
			uint3 EndCoord;
			switch (Edge)
			{
			case 0:
				BeginCoord = Coord;
				EndCoord = Coord + uint3(1, 0, 0);
				break;
			case 3:
				BeginCoord = Coord + uint3(0, 1, 0);
				EndCoord = Coord;
				break;
			case 8:
			default:
				BeginCoord = Coord;
				EndCoord = Coord + uint3(0, 0, 1);
				break;
			}

			const float BeginPointValue = SampleVoxelPoint(BeginCoord, Sampler);
			const float EndPointValue = SampleVoxelPoint(EndCoord, Sampler);
			const float3 VertexPosition = InterpolateVertex(BeginCoord, EndCoord, BeginPointValue, EndPointValue);
			 // Normalize using respective dimensions
			OutVertexBuffer[VertexOffset] = float4((VertexPosition / float3(VoxelSizeX - 1, VoxelSizeY - 1, VoxelSizeZ - 1)) - 0.5f, 0.0f);
			++VertexOffset;
		}
	}
	
	const uint IndexBase = InVertexIndexOffset[CubeOffset].y;
	const uint NumIndices = TriangleNumTable[CubeIndex] * 3;
	for (uint i = 0; i < NumIndices; ++i)
	{
		OutIndexBuffer[IndexBase + i] = Indices[TriangleTable[CubeIndex][i]];
	}
}
